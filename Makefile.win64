# Makefile for mingw32/64
# not tested features library

CC ?= cc
FEATURES ?= utf8

usage := make -f $(notdir $(MAKEFILE_LIST)) [CC=$(CC)] [FEATURES=utf8,ffi,readline]

# $(call grep, string, word-list)
grep = $(strip $(foreach word,$2,$(findstring $(word),$1)))

platform_list := mingw msys cygwin linux bsd darwin # solaris
hostname := $(shell $(CC) -dumpmachine)
platform := $(call grep, $(hostname), $(platform_list))

use_utf8     := $(findstring utf8, $(FEATURES))
use_ffi      := $(findstring ffi, $(FEATURES))
use_readline := $(findstring readline, $(FEATURES))

#TARGET := newlisp

OBJS_default := newlisp.o nl-symbol.o nl-math.o nl-list.o nl-liststr.o nl-string.o nl-filesys.o \
                nl-sock.o nl-import.o nl-xml-json.o nl-web.o nl-matrix.o nl-debug.o pcre.o
OBJS_mingw := win32-util.o win32-path.o
OBJS_FEATURE_utf8 := nl-utf8.o
OBJS := $(OBJS_default)		\
        $(OBJS_$(platform))	\
        $(if $(use_utf8), $(OBJS_FEATURE_utf8))

CFLAGS_default := -Wall -Wno-uninitialized -Wno-long-long -g
CFLAGS_cygwin  := -Wno-char-subscripts -Iinclude
CFLAGS_msys    := $(CFLAGS_cygwin)
CFLAGS_FEATURE_ffi := $(shell pkg-config --cflags libffi 2>/dev/null)
CFLAGS := $(CFLAGS_default)     \
          $(CFLAGS_$(platform)) \
          $(if $(use_ffi), $(CFLAGS_FEATURE_ffi))

DEFS_mingw  := -DWIN_32
DEFS_cygwin := -DCYGWIN
DEFS_msys   := $(DEFS_cygwin)
DEFS_darwin := -DMAC_OSX
DEFS_bsd    := -D_BSD
DEFS_linux  := -DLINUX
DEFS_FEATURE_utf8 := -DSUPPORT_UTF8
DEFS_FEATURE_ffi  := -DFFI
DEFS_FEATURE_readline := -DREADLINE
CPPFLAGS := $(DEFS_$(platform))				\
            $(if $(use_utf8), $(DEFS_FEATURE_utf8))	\
            $(if $(use_ffi), $(DEFS_FEATURE_ffi))	\
            $(if $(use_readline), $(DEFS_FEATURE_readline))

LIBS_mingw  := -lws2_32
LIBS_cygwin := -ldl
LIBS_msys   := $(LIBS_cygwin)
LIBS_linux  := -ldl
LIBS_FEATURE_ffi      := $(shell pkg-config --libs libffi 2>/dev/null)
LIBS_FEATURE_readline := -lreadline # -lncurses
LDLIBS := $(LIBS_$(platform))           \
          $(if $(use_ffi), $(LIBS_FEATURE_ffi)) \
          $(if $(use_readline), $(LIBS_FEATURE_readline))

.PHONY: default
default: newlisp

# %.exe: %.o
# 	$(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@

newlisp: $(OBJS)
	$(CC) $^ $(LDFLAGS) $(LDLIBS) -o $@

$(OBJS): primes.h protos.h newlisp.h

ifeq ($(platform),cygwin)
nl-sock.o: ./include/netinet/icmp6.h

./include/netinet/icmp6.h:
	mkdir -p ./include/netinet/
	curl -s http://www.scs.stanford.edu/histar/src/pkg/uclibc/include/netinet/icmp6.h > ./include/netinet/icmp6.h
endif

OBJS_PROFILE := gmon.out gmon.out *.gcda *.gcno

.PHONY: profile
profile: CFLAGS  += -pg -fprofile-arcs -ftest-coverage
profile: LDFLAGS += -pg -fprofile-arcs -ftest-coverage
profile: default
#	$(MAKE) testall
#	gprof newlisp

.PHONY: help usage
help usage:
	@echo usage: $(usage)

.PHONY: check test
check test: newlisp
	./newlisp -v
	$(MAKE) -f Makefile testall

.PHONY: clean
clean:
	$(RM) newlisp $(OBJS) $(OBJS_PROFILE)
