#!/usr/bin/newlisp
(set 'N
	(case ostype
		("Linux" 100)
		("BSD" 100)
		("OSX" 1000)
		("Tru64Unix" 100)
		("Solaris" 100)
		("SunOS" 100)
		(true (println "Not supported on this OS - will exit") 
			(exit))
	)
)

(println "------------------------------------------ synchronous status update")

; child process continuously generate random numbers
; of which the first N are read by the parent.
(define (child-process)
	(set 'ppid (sys-info -4))
	(while true
		(send ppid (rand 100)) )
)

; start child processes and build an association list of
; child pid and a 0 place holder for the status
(dotimes (i 10) 
	(push (list (spawn 'r  (child-process)) 0) plist))

; collect process status and display result
(println " " (* N 10) " = "  N " x 10 status updates")

(set 'start (time-of-day))
(set 'retries 0)
(for (i 1 N)
	(dolist (p plist) 
		(until (receive (p 0) status) (inc retries)) 
		(setf (lookup (p 0) plist)  status))
	(print 	(format " %4d " (* i 10) )
		(format (append "updates ->" (dup " %-3d" 10) "\r")
			(map last plist) ) )
)

(set 'duration (- (time-of-day) start))
(println "\ntotal " duration  " ms, per update: " 
	(div duration (* N 10)) " ms")
;(println (div retries N) "% read retries")

(abort) (sleep 200)

(println "----------------------------------------- asynchronous status update")

; child process transmits random numbers
(set 'start (time-of-day))

(define (child-process)
    (set 'ppid (sys-info -4)) ; get parent pid
    (while true
        (send ppid (rand 100)))
)

; parent starts 5  child processes, listens and displays

(dotimes (i 5) (spawn 'result (child-process)))

(dotimes (i N)
    (dolist (cpid (sync)) ; iterate thru child pids
        (receive cpid msg)
		(if msg (print (format " %4d of %d, pid:%6d -> %-2d  \r" i N cpid msg))))
)

(abort) ; cancel child-processes
(sleep 300)

(set 'duration (- (time-of-day) start))
(println "received " N " messages from 5 processes in " duration " ms")
(println "per message " (div duration N) " ms")

(println "----------------------------------------------------- roundtrip test")

(define (child-process , pid pppid msg)
		(setq ppid (sys-info -4))
		(setq pid (sys-info -3))
		(while true
			(until (receive ppid msg ))
			(until (send ppid (upper-case (string msg "-" pid)))) )
)

(dotimes (i 10) (spawn 'r (child-process)))

(println (sync))

(set 'start (time-of-day))
(set 'sretry 0)
(set 'rretry 0)
(dotimes (i N)
	(print " " (+ i 1) " of " N " \r")
	(dolist (ch (sync))
		(until (send ch "hi") (inc sretry)) ; send out message
		(until (receive ch msg) (inc rretry)) ; get response
		(unless (= msg (string "HI-" ch)) ; check
			(setq error-msg (append "EEROR in round trip test: " msg ))) ) 
)
(set 'duration (- (time-of-day) start))
(println "\n " N " * 10 roundtrips in " duration 
	" ms, per round trip: " (div duration (* N 10)) " ms")
;(println (div sretry 100) "% send retries, " (div rretry 100) "% read retries"  )

(abort) (sleep 200)

(println "--------------------------------------------------- proxy messageing")

; proxy messageing B -> parent -> A
(set 'start (time-of-day))

(println "sending message from A -> parent-proxy -> B")
(println "message is sent as code and evaluated by parent ... ")

; sender child process of the message
(set 'A (spawn 'result 
	(begin
		(set 'ppid (sys-info -4))
		(set 'pid (sys-info -3))
		(set 'retries 0)
		(dotimes (i N)
			(set 'msg '(until (send B "hello")))
			(until (send ppid msg) (inc retries)))
		; make parent exit
		(set 'rpt (mul (div retries N) 10))
		(set 'msg '(begin 
						(set 'finished true) 
						(set 'A-retry rpt)) )
		(until (send ppid (expand msg 'rpt)))
)))

; receiver child process of the message
(set 'B (spawn 'result (begin
	(set 'ppid (sys-info -4))
	(set 'cnt 0)
	(while true
		(until (receive ppid msg))
		(if (= (% (inc cnt) 10) 0) 
			(print "received " cnt " of " N " messages\r"))
	)
)))

; parent functioning as proxy evaluating messages	
; containing message statements or exit instructions

(set 'finished nil)
(until finished (if (receive A msg) (eval msg)))

(abort) (sleep 100)

(set 'duration (- (time-of-day) start))
(println N " proxy messages in " duration " ms, each: " 
			(div duration N ) " ms")
;(println A-retry "% A send retries")

(println)
(exit)

; eof


