# makefile for newLISP v. 10.5.x with UTF8 support for the Emscripten SDK
#
# As Jan 20, 2014 there are still problems with isome portions of -O1 
# optimized code when handling certain setjmp code.
# When taking out all -O1 everything runs fine, but 20 to 30 times
# slower.
#
# see also: https://github.com/kripken/emscripten/wiki
#
# Uses custom random() and srandom() in nl-filesys.c
#
# Does not implement the newLISP functions:
#   semaphore, net-packet, net-service, fork, spawn, sync, abort
#
# Generates newlisp-js-lib.js and newlisp-js-lib.html.
# The html file can be discarded use newlisp-x.x.x/util/newlisp-js.html instead
#
# Will not do file and network I/O functions in the sandboxed JavaScript 
# environment
#
# this makefile has been tested on a MAC OSX 10.9 platform

OBJS = newlisp.o nl-symbol.o nl-math.o nl-list.o nl-liststr.o nl-string.o nl-filesys.o \
	nl-sock.o nl-web.o nl-xml-json.o nl-matrix.o nl-debug.o pcre.o nl-utf8.o unix-lib.o

CFLAGS = -m32 -Wall -c -DMAC_OSX -DLIBRARY -DEMSCRIPTEN  -DSUPPORT_UTF8

CC = emcc

default: $(OBJS)
	cp qa-specific-tests/qa-bench newlisp-js
	$(CC) $(OBJS) -m32 -lm -O2 -o newlisp-js-lib.html -s EXPORTED_FUNCTIONS="['_newlispEvalStr']" \
	-s MAX_SETJMPS=100 -s MAX_MEMORY=33554432 --closure 1 \
	--embed-file newlisp-js/readme.txt --embed-file newlisp-js/qa-bench
	rm newlisp-js/qa-bench


# -s DISABLE_EXCEPTION_CATCHING=0
# -s MAX_SETJMPS=100 
# --embed-file path-to-mydir # for session file system
# --closure 1 # minifies JS code extracting spaces, about 25% smaller

.c.o:
	$(CC) -O2 --closure 1 $(CFLAGS) $<

$(OBJS): primes.h protos.h makefile_emscripten_lib_utf8


