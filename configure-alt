#!/bin/sh
# this script tries to discover the OS platform and configuration
# and then makes newLISP using the appropiate makefile
# if this script fails and for other special flavors, like
# making shared libraries etc., type: 
#
#      make help
# to see all options specified in Makefile
#
# to change $(prefix) edit prefix in Makefile

# Generate a config.h file with all our different option settings that are set
# by #define

# Now we set the default values for our new Makefile
DEFAULT_CC="gcc"
DARWIN_CC="${DEFAULT_CC}"
LINUX_CC="${DEFAULT_CC}"
BSD_CC="${DEFAULT_CC}"
SUNOS_CC="${DEFAULT_CC}"
AIX_CC="xlc_r"
TRU64_CC="cc"
WIN32_CC="gcc"
OS2_CC="${DEFAULT_CC}"

DEFAULT_CFLAGS=" -Wall -Wno-uninitialized -fno-strict-aliasing -O2 -c"
DARWIN_CFLAGS=" -Wall -pedantic -Wno-long-long -Wno-strict-aliasing -O2 -c"
LINUX_CFLAGS=" -Wall -pedantic -Wno-long-long -Wno-strict-aliasing -O2 -c"
BSD_CFLAGS=" -Wall -pedantic -Wno-uninitialized -Wno-long-long -fno-strict-aliasing -O2 -c"
SUNOS_CFLAGS=" -Wall -pedantic -Wno-uninitialized -Wno-long-long -fno-strict-aliasing -O2 -c"
AIX_XLCFLAGS=" -O2 -c"
AIX_GCCFLAGS=" -Wall -pedantic -Wno-uninitialized -Wno-long-long -fno-strict-aliasing -O2 -c"
TRU64_CFLAGS=" -ieee -pedantic -O3 -c -D_POSIX_PII_SOCKET"
WIN32_CFLAGS=" -Wall -pedantic -Wno-uninitialized -Wno-long-long -O1 -c"
OS2_CFLAGS=" -Wall -pedantic -Wno-uninitialized -Wno-long-long -Wno-strict-aliasing -O2 -c -s"

DEFAULT_LDFLAGS="-lm"
DARWIN_LDFLAGS="${DEFAULT_LDFLAGS}"
LINUX_LDFLAGS="-lm -ldl"
BSD_LDFLAGS="${DEFAULT_LDFLAGS}"
SUNOS_LDFLAGS="-lm -ldl -lrt -lsocket -lnsl"
AIX_LDFLAGS="-lm -ldl -lrt -lnsl"
TRU64_LDFLAGS="-lm -lrt -ldb -lbsd"
WIN32_LDFLAGS="-lws2_32"
OS2_LDFLAGS="-Zomf -Zmt -lm -ldl"

DEFAULT_OBJS="newlisp.o nl-symbol.o nl-math.o nl-list.o nl-liststr.o nl-string.o nl-filesys.o \
	nl-sock.o nl-import.o nl-xml.o nl-web.o nl-matrix.o nl-debug.o pcre.o"

DEFAULT_STRIP="strip"
WIN32_STRIP="strip"

DEFAULT_TARG="newlisp"
WIN32_TARG="newlisp.exe"
OS2_TARG="newlisp.exe"

echo
case `uname` in 
	Darwin) true ${os_type:=MAC_OSX} ;;
	Linux)  true ${os_type:=LINUX} ;;
	FreeBSD) true ${os_type:=_BSD} ;;
	NetBSD) true ${os_type:=_BSD} ;;
	OpenBSD) true ${os_type:=_BSD} ;;
	SunOS) true ${os_type:=SUNOS} ;;
	AIX) true ${os_type:=AIX} ;; 
	OSF1) true ${os_type:=TRU64} ;;
MINGW32_NT-5.1) true ${os_type:=WIN_32} ;;
	OS/2) true ${os_type:=OS2} ;;
	*)
		echo Could not discover your OS platform use one of the following commands:
		make help
		;;
esac

echo "Detected Operating System ${os_type}"

if   [ ${os_type} = MAC_OSX ] ; then
	DEFAULT_CFLAGS="${DARWIN_CFLAGS}"
elif [ ${os_type} = LINUX ] ; then
	DEFAULT_CFLAGS="${LINUX_CFLAGS}"
	DEFAULT_LDFLAGS="${LINUX_LDFLAGS}"
elif [ ${os_type} = _BSD ] ; then
	DEFAULT_CFLAGS="${BSD_CFLAGS}"
elif [ ${os_type} = SUNOS ] ; then
	DEFAULT_CFLAGS="${SUNOS_CFLAGS}"
	DEFAULT_LDFLAGS="${SUNOS_LDFLAGS}"
elif [ ${os_type} = AIX ] ; then
	DEFAULT_CC="${AIX_CC}"
	DEFAULT_CFLAGS="${AIX_XLCFLAGS}"
	true ${enable_readline:=no};
elif [ ${os_type} = TRU64 ] ; then
	DEFAULT_CC="${TRU64_CC}"
	DEFAULT_CFLAGS="${TRU64_CFLAGS}"
	DEFAULT_LDFLAGS="${TRU64_LDFLAGS}"
elif [ ${os_type} = WIN_32 ] ; then
	DEFAULT_CC="${WIN32_CC}"
	DEFAULT_CFLAGS="${WIN32_CFLAGS}"
	DEFAULT_LDFLAGS="${WIN32_LDFLAGS}"
	DEFAULT_OBJS="${DEFAULT_OBJS} win32-util.o win32-path.o"
	DEFAULT_STRIP="${WIN32_STRIP}"
	DEFAULT_TARG="${WIN32_TARG}"
	true ${enable_readline:=no};
	true ${enable_utf8:=no};
elif [ ${os_type} = OS2 ] ; then
	DEFAULT_CFLAGS="${OS2_CFLAGS}"
	DEFAULT_LDFLAGS="${OS2_LDFLAGS}"
	DEFAULT_TARG="${OS2_TARG}"
	true ${enable_readline:=no};
fi

# Only LP64 and ILP32 memory models are officially supported, but we'll try to
# support the others too.
cat > test-memorymodel.c <<EOF
/* test-memorymodel.c Ted Walther <ted@reactor-core.org>
 *
 * return a string with the type of memory model the current compiler is using.
 */

#include <stdio.h>

int
main(int argc, char** argv) {
	short sc = sizeof(char) * 8;
	short ss = sizeof(short) * 8;
	short si = sizeof(int) * 8;
	short sl = sizeof(long) * 8;
	short sp = sizeof(void*) * 8;

	if (si == 32 && sl == 64 && sp == 64) { printf("LP64\n"); return 0; }
	if (si == 64 && sl == 64 && sp == 64) { printf("ILP64\n"); return 0; }
	if (si == 32 && sl == 32 && sp == 64) { printf("LLP64\n"); return 0; }
	if (si == 32 && sl == 32 && sp == 32) { printf("ILP32\n"); return 0; }
	if (si == 16 && sl == 32 && sp == 32) { printf("LP32\n"); return 0; }
	printf("UNKNOWN\n"); return 1;
}
EOF
${CC:-${DEFAULT_CC}} test-memorymodel.c -o test-memorymodel 2>/dev/null
true ${memory_model:=`./test-memorymodel`}
echo "Detected memory model `./test-memorymodel`, using memory model ${memory_model}"
rm -f test-memorymodel*

# If we can't compile with readline, and the environment variables don't
# specify otherwise, we will disable it.
cat > test-readline.c <<EOF
/* test-readline.c Fri Jul 10 14:57:33 PDT 2009 Ted Walther <ted@reactor-core.org>
 *
 * code for testing the compiler options to use for libreadline
 */

#include <stdio.h>
#include <stdlib.h>

#include <readline/readline.h>
#include <readline/history.h>

char **
test_completion (char * text, int start, int end) {
	return NULL;
}

int
main(int argc, char** argv) {

	rl_readline_name = "test";
	rl_attempted_completion_function = (CPPFunction *)test_completion;
	readline(NULL);
	add_history("test");

	exit(0);
}
EOF
for cclibreadline in "-lreadline" "-lreadline -lncurses" "-lreadline -ltermcap" "-lreadline -lterminfo"; do
	if ${CC:-${DEFAULT_CC}} test-readline.c ${cclibreadline} -o test-readline 2>/dev/null ; then
		true ${enable_readline:=yes};
		DEFAULT_RLFLAGS="${cclibreadline}";
		break;
	fi
done
true ${enable_readline:=no};
rm -f test-readline*


# Safe defaults; I hope Lutz makes ipv6 default to "yes" soon.
true ${enable_utf8:=yes};
true ${enable_ipv6:=no};

# Default values to control how the Makefile is generated
true ${enable_static:=no};
true ${enable_debug:=no};

for arg in "$@"; do
case "${arg}" in
	--enable-utf8) enable_utf8=yes; ;;
	--disable-utf8) enable_utf8=no; ;;
	--enable-readline) enable_readline=yes; ;;
	--disable-readline) enable_readline=no; ;;
	--enable-ipv6) enable_ipv6=yes; ;;
	--disable-ipv6) enable_ipv6=no; ;;
	--enable-static) enable_static=yes; ;;
	--disable-static) enable_static=no; ;;
	--enable-debug) enable_debug=yes; ;;
	--disable-debug) enable_debug=no; ;;
	--LP64)  memory_model=LP64; ;;
	--ILP64) memory_model=ILP64; ;;
	--LLP64) memory_model=LLP64; ;;
	--LP32)  memory_model=LP32; ;;
	--ILP32) memory_model=ILP32; ;;
	--help) cat <<EOF
Usage: ./configure [options]
     --enable-utf8       # (default) Enable UTF8 support
     --disable-utf8      # Disable UTF8 support
     --enable-readline   # (default) Enable readline support
     --disable-readline  # Disable readline support
     --enable-ipv6       # (default) Enable IPv6 support
     --disable-ipv6      # Disable IPv6 support
     --enable-static     # Link newlisp statically, suitable for use in chroot jails
     --disable-static    # (default) Link newlisp dynamically
     --enable-debug      # Include debugging information in the newlisp binary
     --disable-debug     # (default) Compile without debugging information
     --LP64              # Use LP64 memory model, overriding auto-detection
     --ILP64             # Use ILP64 memory model, overriding auto-detection    
     --LLP64             # Use LLP64 memory model, overriding auto-detection
     --LP32              # Use LP32 memory model, overriding auto-detection
     --ILP32             # Use ILP32 memory model, overriding auto-detection
     --help              # Show this help message.
EOF
	exit; ;;	
	*) echo "Unrecognized option, ignoring: ${arg}" ;;
esac
done

cat >> config.h <<EOF
/* Operating System Type */
#define ${os_type}

/* Memory model for the platform */
#define MEMORY_MODEL_${memory_model}

EOF


if [ $memory_model = LP64 ] ; then
	cat >> config.h <<EOF
/* This platform is using the LP64 memory model.  Adding legacy #define */
#define NEWLISP64

EOF
fi

if [ $enable_utf8 = yes ] ; then
	DEFAULT_OBJS="${DEFAULT_OBJS} nl-utf8.o"
	cat >> config.h <<EOF
/* UTF8 support was chosen */
#define SUPPORT_UTF8

EOF
echo "UTF-8 is enabled"
fi

if [ $enable_readline = yes ] ; then
	cat >> config.h <<EOF
/* READLINE support was chosen */
#define READLINE

EOF
	echo "readline support is enabled"
else
	DEFAULT_RLFLAGS=""
	cat <<EOF
readline support is disabled

To enable readline support, use the --enable-readline option, and specify the
proper libraries to link by setting the RLFLAGS variable when running
configure.  Also if necessary, use the INCLUDES variable to specify where the
readline header files are."

EOF
fi

if [ $enable_ipv6 = yes ] ; then
	cat >> config.h <<EOF
/* IPv6 support was chosen */
#define IPV6

EOF
	echo "IPV-6 support is enabled"
fi

echo "/* EOF */" >> config.h

if [ $enable_static = yes ] ; then
	DEFAULT_LDFLAGS="${DEFAULT_LDFLAGS} -static"
	echo "Static linking enabled"
fi

if [ $enable_debug = yes ] ; then
	DEFAULT_CFLAGS="${DEFAULT_CFLAGS} -g"
	DEFAULT_LDFLAGS="${DEFAULT_LDFLAGS} -g"
	echo "Debugging enabled"
fi

cat >test-archflag.c <<EOF
#include <stdio.h>

int
main(int argc, char** argv) {
  printf("Hello World.\n");
}
EOF

DEFAULT_ARCHFLAGS=""
if   [ $memory_model = LP64 ] ; then
	if   [ $os_type = AIX -a ${CC:-${DEFAULT_CC}} = xlc_r ] ; then
		DEFAULT_ARCHFLAGS="-q64"
	elif [ $os_type = AIX -a ${CC:-${DEFAULT_CC}} = gcc ] ; then
    DEFAULT_ARCHFLAGS="-maix64"
  else
    if ${CC:-${DEFAULT_CC}} -m64 -o test-archflag test-archflag.c 2>/dev/null; then
      DEFAULT_ARCHFLAGS="-m64"
    fi
	fi
elif [ $memory_model = ILP32 ] ; then
    if ${CC:-${DEFAULT_CC}} -m32 -o test-archflag test-archflag.c 2>/dev/null; then
      DEFAULT_ARCHFLAGS="-m32"
    fi
fi
rm -f test-archflag*

STRIPBINARY="	\$(STRIP) \$(TARG)"
LINKSTAGE="	\$(CC) \$(OBJS) \$(ARCHFLAGS) \$(LDFLAGS) \$(RLFLAGS) -o \$(TARG)"
COMPILEOBJS="	\$(CC) \$(ARCHFLAGS) \$(CFLAGS) -DNEWCONFIG $<"

if [ $os_type = OS2 ] ; then
	STRIPBINARY=""
	LINKSTAGE="\$(CC) \$(OBJS) \$(ARCHFLAGS) \$(LDFLAGS) \$(RLFLAGS) -o \$(TARG)"
	COMPILEOBJS="\$(CC) \$(ARCHFLAGS) \$(CFLAGS) -DNEWCONFIG $<"
elif [ $os_type = AIX -a $memory_model = LP64 ] ; then
  LINKSTAGE=" OBJECT_MODE=64 \$(CC) \$(OBJS) \$(ARCHFLAGS) \$(LDFLAGS) \$(RLFLAGS) -o \$(TARG)"
fi

# Now let us make the Makefile (makefile_configure)
cat > makefile_configure <<EOF
# makefile for newLISP v. 10.1.x generated by the configure script
CC = ${CC:-${DEFAULT_CC}}
CFLAGS = ${CFLAGS:-${DEFAULT_CFLAGS}} ${INCLUDES}
LDFLAGS = ${LDFLAGS:-${DEFAULT_LDFLAGS}}
OBJS = ${OBJS:-${DEFAULT_OBJS}}
STRIP = ${STRIP:-${DEFAULT_STRIP}}
TARG = ${TARG:-${DEFAULT_TARG}}
RLFLAGS = ${RLFLAGS:-${DEFAULT_RLFLAGS}}
ARCHFLAGS = ${ARCHFLAGS:-${DEFAULT_ARCHFLAGS}}

default: \$(OBJS)
${LINKSTAGE}
${STRIPBINARY}

.c.o:
${COMPILEOBJS}

\$(OBJS): primes.h protos.h config.h makefile_configure
EOF

echo
echo "Type \"make\" to build your newlisp binary."
echo
echo "If that doesn't work, type \"make help\""

